# - *- coding: utf- 8 - *-
from aiogram import Router, Bot, F, types
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from tgbot.database.db_users import Clientx, Userx
from tgbot.database.db_settings import Settingsx
from tgbot.database.db_users import UserModel
from tgbot.keyboards.inline_register import cities_kb, skip_kb, specs_kb
from tgbot.keyboards.inline_user import user_support_finl
from tgbot.keyboards.reply_main import (
    menu_frep,
    menu_second_start,
    menu_second_start_clients,
)
from tgbot.utils.const_functions import ded
from tgbot.utils.misc.bot_filters import IsBuy, IsRefill, IsWork
from tgbot.utils.misc.bot_models import FSM, ARS


import json

router = Router()

# –ò–≥–Ω–æ—Ä-–∫–æ–ª–±—ç–∫–∏ –ø–æ–∫—É–ø–æ–∫
prohibit_buy = [
    "buy_category_swipe",
    "buy_category_open",
    "buy_position_swipe",
    "buy_position_open",
    "buy_item_open",
    "buy_item_confirm",
]

# –ò–≥–Ω–æ—Ä-–∫–æ–ª–±—ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
prohibit_refill = [
    "user_refill",
    "user_refill_method",
    "Pay:",
    "Pay:Yoomoney",
]

router = Router(name=__name__)


################################################################################
########################### –°–¢–ê–¢–£–° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –†–ê–ë–û–¢ ###########################
# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã - —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(IsWork())
async def filter_work_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()

    if get_settings.misc_support != "None":
        return await message.answer(
            "<b>‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>",
            reply_markup=user_support_finl(get_settings.misc_support),
        )

    await message.answer("<b>‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã - –∫–æ–ª–±—ç–∫
@router.callback_query(IsWork())
async def filter_work_callback(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.answer("‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.", True)


################################################################################
################################# –°–¢–ê–¢–£–° –ü–û–ö–£–ü–û–ö ###############################
# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ - —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(IsBuy(), F.text == "üßëüèª‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
@router.message(IsBuy(), StateFilter("here_item_count"))
async def filter_buy_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer("<b>‚õî –ó–∞–∫–∞–∑—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ - –∫–æ–ª–±—ç–∫
@router.callback_query(IsBuy(), F.text.startswith(prohibit_buy))
async def filter_buy_callback(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.answer("‚õî –ó–∞–∫–∞–∑—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.", True)


################################################################################
############################### –°–¢–ê–¢–£–° –ü–û–ü–û–õ–ù–ï–ù–ò–ô ##############################
# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(IsRefill(), StateFilter("here_pay_amount"))
async def filter_refill_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer("<b>‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –∫–æ–ª–±—ç–∫
@router.callback_query(IsRefill(), F.text.startswith(prohibit_refill))
async def filter_refill_callback(
    call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS
):
    await state.clear()

    await call.answer("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.", True)


################################################################################
#################################### –ü–†–û–ß–ï–ï ####################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text.in_(("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start")))
async def main_start(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        ded(
            """
            üë∑‚Äç‚ôÇÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ë–∏—Ä–∂–∞ RabotaPlus ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤!¬† 
            –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? 
        """
        ),
        reply_markup=menu_frep(message.from_user.id),
    )


# –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RegisterStates(StatesGroup):
    user_rlname = State()
    user_surname = State()
    user_number = State()
    experience_years = State()  # NEW
    city = State()  # NEW
    specs = State()  # NEW (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
    photos = State()  # NEW (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)


@router.message(F.text.in_(("üë∑ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",)))
async def enter_registr(message: Message, state: FSMContext):
    user = Userx.get(user_id=message.from_user.id)

    def is_empty(value) -> bool:
        return value is None or str(value).strip() in ("", "0")

    if not user or any(
        [
            is_empty(user.user_rlname),
            is_empty(user.user_surname),
            is_empty(user.user_number),
        ]
    ):
        # –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(RegisterStates.user_rlname)
    else:
        # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.user_rlname}!",
            reply_markup=menu_second_start(message.from_user.id),
        )


@router.message(RegisterStates.user_rlname)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(user_rlname=message.text.strip())
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(RegisterStates.user_surname)


@router.message(RegisterStates.user_surname)
async def set_surname(message: Message, state: FSMContext):
    await state.update_data(user_surname=message.text.strip())
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(RegisterStates.user_number)


@router.message(RegisterStates.user_number)
async def set_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not phone.startswith("+") or not phone[1:].isdigit() or len(phone) < 10:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567."
        )
        return
    await state.update_data(user_number=phone)
    await message.answer("‚è≥ –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")
    await state.set_state(RegisterStates.experience_years)


@router.message(RegisterStates.experience_years)
async def set_experience(message: Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –ª–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5).")
        return
    years = int(txt)
    if years < 0 or years > 60:
        await message.answer("‚ùå –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 60.")
        return
    await state.update_data(experience_years=years)
    await message.answer("üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=cities_kb())
    await state.set_state(RegisterStates.city)


@router.callback_query(RegisterStates.city, F.data.startswith("city:"))
async def choose_city(call: CallbackQuery, state: FSMContext):
    _, city = call.data.split(":", 1)
    await state.update_data(city=city)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    await call.message.edit_text(
        "üß∞ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    )
    await call.message.edit_reply_markup(reply_markup=specs_kb(selected=[]))
    await state.update_data(specs_selected=[])  # —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ set
    await state.set_state(RegisterStates.specs)  # –í–ê–ñ–ù–û!
    await call.answer()


@router.callback_query(RegisterStates.specs, F.data.startswith("spec:"))
async def toggle_spec(call: CallbackQuery, state: FSMContext):
    _, slug = call.data.split(":", 1)
    data = await state.get_data()
    selected: list[str] = list(data.get("specs_selected", []))
    if slug in selected:
        selected.remove(slug)
    else:
        selected.append(slug)
    await state.update_data(specs_selected=selected)
    await call.message.edit_reply_markup(reply_markup=specs_kb(selected))
    await call.answer()


# --- –∏–º–ø–æ—Ä—Ç—ã —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ ---
from aiogram import F, Router, Bot
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from tgbot.database.db_position import Positionx

router = Router(name=__name__)


# ========= –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã =========
def handoff_kb(punix: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"handoff:confirm:{punix}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f"handoff:add:{punix}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"handoff:cancel:{punix}"
                )
            ],
        ]
    )


# ========= —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–∞–∫ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ =========
class HandoffStates(StatesGroup):
    photos = State()  # –∂–¥—ë–º —Ñ–æ—Ç–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è


# ========= —Å—Ç–∞—Ä—Ç ¬´–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É¬ª =========
# –≤—ã–∑—ã–≤a–µ—Ç—Å—è –ø–æ —Ç–≤–æ–µ–π –∫–Ω–æ–ø–∫–µ: myresp:handoff:{punix}
@router.callback_query(F.data.startswith("myresp:handoff:"))
async def handoff_start(call: CallbackQuery, state: FSMContext):
    punix = int(call.data.split(":")[2])
    await state.update_data(handoff_punix=punix, handoff_photos=[])
    await call.message.edit_text(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ 1‚Äì5 —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ.\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=handoff_kb(punix),
    )
    await state.set_state(HandoffStates.photos)
    await call.answer()


# ========= –ø—Ä–∏—ë–º —Ñ–æ—Ç–æ (1..5), –∫–∞–∫ –≤ —Ç–≤–æ–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ =========
@router.message(HandoffStates.photos, F.photo)
async def handoff_receive_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    punix: int = int(data.get("handoff_punix", 0))
    files: list[str] = list(data.get("handoff_photos", []))

    if len(files) >= 5:
        await message.answer(
            "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –∏–ª–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª."
        )
        return

    file_id = message.photo[-1].file_id  # –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
    files.append(file_id)
    await state.update_data(handoff_photos=files)

    await message.answer(
        f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(files)}/5). –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=handoff_kb(punix),
    )


# ========= –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É =========
@router.callback_query(HandoffStates.photos, F.data.startswith("handoff:confirm:"))
async def handoff_confirm(call: CallbackQuery, state: FSMContext, bot: Bot):
    punix = int(call.data.split(":")[-1])
    data = await state.get_data()
    photos: list[str] = list(data.get("handoff_photos", []))[:5]

    pos = Positionx.get(position_unix=punix)
    if not pos:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    client_id = int(getattr(pos, "position_id", 0) or 0)
    title = getattr(pos, "position_name", "–ó–∞–∫–∞–∑")

    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ
    if not photos:
        await call.answer(
            "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", show_alert=True
        )
        return

    # 1) –æ—Ç–ø—Ä–∞–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∑–∞–∫–∞–∑—á–∏–∫—É
    media = [InputMediaPhoto(type="photo", media=fid) for fid in photos]
    try:
        await bot.send_media_group(chat_id=client_id, media=media)
    except Exception:
        # fallback: –ø–æ –æ–¥–Ω–æ–º—É
        for fid in photos:
            try:
                await bot.send_photo(chat_id=client_id, photo=fid)
            except Exception:
                pass

    # 2) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
    try:
        await bot.send_message(
            chat_id=client_id,
            text=(
                "üöö <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–∞–ª —Ä–∞–±–æ—Ç—É</b>\n\n"
                f"üì¶ –ó–∞–∫–∞–∑: <code>{title}</code>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."
            ),
            disable_web_page_preview=True,
        )
    except Exception:
        pass

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ ¬´–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ¬ª = 2
    try:
        Positionx.update_unix(punix, position_status=2)
    except Exception:
        pass

    # 3) –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    try:
        await call.message.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception:
        await call.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    await state.clear()
    await call.answer()


# ========= –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë (–ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞, –æ—Å—Ç–∞—ë–º—Å—è –≤ state) =========
@router.callback_query(HandoffStates.photos, F.data.startswith("handoff:add:"))
async def handoff_add_more(call: CallbackQuery, state: FSMContext):
    await call.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")


# ========= –æ—Ç–º–µ–Ω–∞ =========
@router.callback_query(HandoffStates.photos, F.data.startswith("handoff:cancel:"))
async def handoff_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception:
        await call.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()


# ‚îÄ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ
class RegisterStatesClients(StatesGroup):
    client_rlname = State()
    client_surname = State()
    client_number = State()


# ‚îÄ‚îÄ‚îÄ –•–µ–ª–ø–µ—Ä—ã ‚îÄ‚îÄ‚îÄ
def _is_empty(v) -> bool:
    return v is None or str(v).strip() in ("", "0")


def _valid_phone(phone: str) -> bool:
    p = phone.strip()
    return p.startswith("+") and len(p) >= 10 and p[1:].isdigit()


# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / –≤—Ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ ‚îÄ‚îÄ‚îÄ
@router.message(F.text.in_(("üîé –Ø –∑–∞–∫–∞–∑—á–∏–∫",)))
async def enter_registr_client(message: Message, state: FSMContext):
    client = Clientx.get(client_id=message.from_user.id)

    if (client is None) or any(
        [
            _is_empty(getattr(client, "client_rlname", None)),
            _is_empty(getattr(client, "client_surname", None)),
            _is_empty(getattr(client, "client_number", None)),
        ]
    ):
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:", reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(RegisterStatesClients.client_rlname)
        return

    # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {client.client_rlname}!",
        reply_markup=menu_second_start_clients(message.from_user.id),
    )


# ‚îÄ‚îÄ‚îÄ –ò–º—è ‚îÄ‚îÄ‚îÄ
@router.message(RegisterStatesClients.client_rlname)
async def set_client_name(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(client_rlname=name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegisterStatesClients.client_surname)


# ‚îÄ‚îÄ‚îÄ –§–∞–º–∏–ª–∏—è ‚îÄ‚îÄ‚îÄ
@router.message(RegisterStatesClients.client_surname)
async def set_client_surname(message: Message, state: FSMContext):
    surname = (message.text or "").strip()
    if not surname:
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –µ—â—ë —Ä–∞–∑:"
        )
        return
    await state.update_data(client_surname=surname)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
    await state.set_state(RegisterStatesClients.client_number)


# ‚îÄ‚îÄ‚îÄ –¢–µ–ª–µ—Ñ–æ–Ω ‚îÄ‚îÄ‚îÄ
@router.message(RegisterStatesClients.client_number)
async def set_client_phone(message: Message, state: FSMContext):
    phone = (message.text or "").strip()

    if not _valid_phone(phone):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:"
        )
        return

    await state.update_data(client_number=phone)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    data = await state.get_data()
    client_rlname = data["client_rlname"]
    client_surname = data["client_surname"]
    client_number = data["client_number"]

    Clientx.update(
        message.from_user.id,
        client_login=(message.from_user.username or "unknown").lower(),
        client_name=message.from_user.first_name or "unknown",
        client_rlname=client_rlname,
        client_surname=client_surname,
        client_number=client_number,
    )

    await state.clear()

    # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer(
        ded(
            f"""
        ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
        –í–∞—à–µ –∏–º—è: {client_rlname}
        –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {client_surname}
        –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {client_number}
        """
        )
    )
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {client_rlname}!\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑."
    )
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=menu_second_start_clients(message.from_user.id),
    )
